{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome # The Fire Chicken Games Combat module will be available for purchase on the Unity Asset Store in mid-April 2020.","title":"Welcome"},{"location":"#welcome","text":"The Fire Chicken Games Combat module will be available for purchase on the Unity Asset Store in mid-April 2020.","title":"Welcome"},{"location":"combat/","text":"The Combat module builds on the Game Creator Shooter module to add enhanced, game-ready, combat features: Proximity-based weapon targeting. Target indicator. Target changed event detection. Homing projectile. Dependencies # Combat is an extension for Game Creator and the Shooter module. BOTH are required - Combat will not work without them. They can be purchased from the Unity Asset Store: Game Creator Shooter What\u2019s Included # Full source code. An examples module that contains scenes that demonstrate the features listed above. Module Installation # After purchasing and downloading the Combat module, it must be enabled with the Game Creator Module Manager. Step 1: Open the Module Manager # Step 2: Enable the Combat Module # Step 3 (optional): Install the Combat Examples Module #","title":"Getting Started"},{"location":"combat/#dependencies","text":"Combat is an extension for Game Creator and the Shooter module. BOTH are required - Combat will not work without them. They can be purchased from the Unity Asset Store: Game Creator Shooter","title":"Dependencies"},{"location":"combat/#whats-included","text":"Full source code. An examples module that contains scenes that demonstrate the features listed above.","title":"What\u2019s Included"},{"location":"combat/#module-installation","text":"After purchasing and downloading the Combat module, it must be enabled with the Game Creator Module Manager.","title":"Module Installation"},{"location":"combat/#step-1-open-the-module-manager","text":"","title":"Step 1: Open the Module Manager"},{"location":"combat/#step-2-enable-the-combat-module","text":"","title":"Step 2: Enable the Combat Module"},{"location":"combat/#step-3-optional-install-the-combat-examples-module","text":"","title":"Step 3 (optional): Install the Combat Examples Module"},{"location":"combat/homing_projectiles/","text":"As the name suggests, a Homing Projectile seeks its target even if the weapon firing the projectile is not pointed directly at the intended target. Setup is trivial. Simply attach the Combat module\u2019s Homing Projectile component to any projectile. The component\u2019s Ammo Rigidbody property will be automatically set if the game object contains a Rigidbody component. The Propulsion settings control the movement behavior of the projectile: Seconds To Wait Before Propelling : Delays the propulsion of the projectile by a number of seconds. A value of 0 (or less) results in no delay. Maximum Turn Angle : The maximum angle, in degrees, that the projectile will turn while homing in on its target. Velocity : How fast the projectile moves toward its target - this should likely match or exceed the max velocity of the projectile ammo if propulsion is delayed. If there is no delay, this setting will effectively override the projectile ammo\u2019s min/max velocity. Rigidybody Gravity Turning off gravity on the Rigidbody is optional, but might be desired depending on the specific projectile.","title":"Homing Projectiles"},{"location":"combat/targeting/","text":"The Combat module provides a proximity-based targeting system. It allows a player to target characters (or other game objects) within a configurable range. This is achieved with two components: Targeter and Targetable . Targeter Component # Included in the Combat Examples module is a prefab called PlayerTargeter that demonstrates how to use the Targeter component. The Sphere Collider attached to the same game object (as depicted in the inspector screenshot below) is required. Note that the range of the Targeter is dictated by the Radius property of this collider. The PlayerTargeter prefab should be nested under the Game Creator Player object. Automatically aiming at a target can be disabled with the Auto Aim At Target option - the character will still be locked on to it, but will not fix their weapon on it while aiming. This may be desirable for some games, but should be left enabled for most. The User Input section of the Targeter component allows the keys that control target locking and switching to be customized. Targetable Component # Making game objects targetable using the Combat module\u2019s Targetable component is trivial for Game Creator Characters and other game objects. Basics # Characters # To make a character targetable, simply add the Targetable component to it. Non-Character Game Objects # Any game object can be targetable if it has the Targetable , Rigidbody , and Collider components. Making a Target Untargetable # The Targetable component contains a boolean Game Creator Variable property, called Can Be Targeted , that can make the target untargetable. For example, once the target has been defeated, it is likely desirable for the player to automatically stop targeting it and not be able to target it again. This is accomplished by adding a boolean Local Variable\u221a to a character (e.g. \"IsAlive\"), then assigning it to the Can Be Targeted** property. In the character\u2019s On Receive Shot Actions , set the boolean value to false - this will deselect the target and make it no longer targetable. The Combat Examples module\u2019s Example4-KillableCharacters demo scene contains a pre-configured KillableCharacter prefab. It demonstrates how to make a character killable/untargetable using the method described above. Advanced # Active Target Indicator # The Targetable component provides an \"indicator\" feature that highlights the currently targeted game object. The content and appearance of the indicator is configurable. Text # An indicator can have custom text, defined via a Game Creator Global/Local Variable . Practically speaking, it almost always makes sense to use a Local Variable packaged in the same prefab object that contains the Targetable component. The value of the Local Variable would then be configured on the instance of the prefab when used in a scene. Prefab # If not set, the Game Creator Floating Message prefab is automatically set as the target indicator prefab at runtime. The Combat Examples module includes an example of a custom indicator. The example indicator has text above a downward pointing arrow. Positioning # The target indicator is positioned relative to the parent game object. By default, the Indicator Offset vector will position the indicator above the Game Creator example character, but may need to be adjusted for other characters and objects of with heights. Targeting Actions # A Targetable game object can optionally execute actions when it becomes the active target, and another set of actions when some other object becomes the active target (or targeting is toggled off altogether). \"On Become Active Target\" # When the target becomes the active target, these actions can (for example) make the target crouch. A more practical example might be adding an outline around the target or perhaps set a variable that triggers some behavior (e.g. make the target hostile or flee). \"On Not Active Target\" # Related to the previous section, when the target is changed or targeting is disabled, this action will reset the target character\u2019s gesture state.","title":"Targeting"},{"location":"combat/targeting/#targeter-component","text":"Included in the Combat Examples module is a prefab called PlayerTargeter that demonstrates how to use the Targeter component. The Sphere Collider attached to the same game object (as depicted in the inspector screenshot below) is required. Note that the range of the Targeter is dictated by the Radius property of this collider. The PlayerTargeter prefab should be nested under the Game Creator Player object. Automatically aiming at a target can be disabled with the Auto Aim At Target option - the character will still be locked on to it, but will not fix their weapon on it while aiming. This may be desirable for some games, but should be left enabled for most. The User Input section of the Targeter component allows the keys that control target locking and switching to be customized.","title":"Targeter Component"},{"location":"combat/targeting/#targetable-component","text":"Making game objects targetable using the Combat module\u2019s Targetable component is trivial for Game Creator Characters and other game objects.","title":"Targetable Component"},{"location":"combat/targeting/#basics","text":"","title":"Basics"},{"location":"combat/targeting/#characters","text":"To make a character targetable, simply add the Targetable component to it.","title":"Characters"},{"location":"combat/targeting/#non-character-game-objects","text":"Any game object can be targetable if it has the Targetable , Rigidbody , and Collider components.","title":"Non-Character Game Objects"},{"location":"combat/targeting/#making-a-target-untargetable","text":"The Targetable component contains a boolean Game Creator Variable property, called Can Be Targeted , that can make the target untargetable. For example, once the target has been defeated, it is likely desirable for the player to automatically stop targeting it and not be able to target it again. This is accomplished by adding a boolean Local Variable\u221a to a character (e.g. \"IsAlive\"), then assigning it to the Can Be Targeted** property. In the character\u2019s On Receive Shot Actions , set the boolean value to false - this will deselect the target and make it no longer targetable. The Combat Examples module\u2019s Example4-KillableCharacters demo scene contains a pre-configured KillableCharacter prefab. It demonstrates how to make a character killable/untargetable using the method described above.","title":"Making a Target Untargetable"},{"location":"combat/targeting/#advanced","text":"","title":"Advanced"},{"location":"combat/targeting/#active-target-indicator","text":"The Targetable component provides an \"indicator\" feature that highlights the currently targeted game object. The content and appearance of the indicator is configurable.","title":"Active Target Indicator"},{"location":"combat/targeting/#text","text":"An indicator can have custom text, defined via a Game Creator Global/Local Variable . Practically speaking, it almost always makes sense to use a Local Variable packaged in the same prefab object that contains the Targetable component. The value of the Local Variable would then be configured on the instance of the prefab when used in a scene.","title":"Text"},{"location":"combat/targeting/#prefab","text":"If not set, the Game Creator Floating Message prefab is automatically set as the target indicator prefab at runtime. The Combat Examples module includes an example of a custom indicator. The example indicator has text above a downward pointing arrow.","title":"Prefab"},{"location":"combat/targeting/#positioning","text":"The target indicator is positioned relative to the parent game object. By default, the Indicator Offset vector will position the indicator above the Game Creator example character, but may need to be adjusted for other characters and objects of with heights.","title":"Positioning"},{"location":"combat/targeting/#targeting-actions","text":"A Targetable game object can optionally execute actions when it becomes the active target, and another set of actions when some other object becomes the active target (or targeting is toggled off altogether).","title":"Targeting Actions"},{"location":"combat/targeting/#on-become-active-target","text":"When the target becomes the active target, these actions can (for example) make the target crouch. A more practical example might be adding an outline around the target or perhaps set a variable that triggers some behavior (e.g. make the target hostile or flee).","title":"\"On Become Active Target\""},{"location":"combat/targeting/#on-not-active-target","text":"Related to the previous section, when the target is changed or targeting is disabled, this action will reset the target character\u2019s gesture state.","title":"\"On Not Active Target\""}]}